<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html lang='en'>
  <head>
    <meta content='text/html; charset=utf-8' http-equiv='Content-Type'>
    <meta content='DraftServer' name='generator'>
    <title>CSS Working Group Editor Drafts</title>
    <link href='/local/img/cssicon.png' rel='icon' type='image/png'>
    <style type='text/css'><!-- a.report { display: none; } --></style>
    <link href='/core/stylesheets/base.css' rel='stylesheet' type='text/css'>
    <link href='/core/stylesheets/system.css' rel='stylesheet' type='text/css'>
    <link href='/stylesheets/drafts.css' rel='stylesheet' type='text/css'>
    <style type='text/css'><!-- .body img { float: left; margin-right: 1em; } .warning { color: #08F; font-weight: bold; } .link-error { color: #AA0; font-wieght: bold; } .error { color: #D00; font-weight: bold; } --></style>
    <script type='text/javascript'>
<!--
var gCookieDomain = ".drafts.csswg.org";
var gCookiePath = "\/";
var gCookiePrefix = "drafts_";
var gUserId = false;
/*******************************************************************************
 *
 *  Copyright © 2011-2013 Hewlett-Packard Development Company, L.P. 
 *
 *  This work is distributed under the W3C® Software License [1] 
 *  in the hope that it will be useful, but WITHOUT ANY 
 *  WARRANTY; without even the implied warranty of 
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 *
 *  [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231 
 *
 ******************************************************************************/


/**
 * Common functions for System Pages
 */


/**
 * IE 7/8 Shim Code
 */
if (! Array.indexOf) {
  Array.prototype.indexOf = function(obj) {
    for (var index = 0; index < this.length; index++) {
      if (this[index] == obj) {
        return index;
      }
    }
    return -1;
  }
}
try {
  if (1 != Node.ELEMENT_NODE) {
    throw true;
  }
}
catch (exc) {
  var Node = {
    ELEMENT_NODE:   1,
    ATTRIBUTE_NODE: 2,
    TEXT_NODE:      3
  };
}

var system = {
  mAPIXHR: null,
  mAPITimer: null,
  mAPIQueue: [],
  
  commonPrefix: function(string1, string2)
  {
    var prefix = '';
    var length = ((string1.length < string2.length) ? string1.length : string2.length);
    var index = -1;
    while ((++index < length) & (string1[index] == string2[index])) {
      prefix += string1[index];
    }
    return prefix;
  },

  getCookie: function(name)
  {
    var cookies = document.cookie.split(';');
    name += '=';
    var prefixedName = gCookiePrefix + name;
    for (var index = 0; index < cookies.length; index++) {
      cookie = cookies[index].trim();
      if (prefixedName == cookie.substring(0, prefixedName.length)) {
        return unescape(cookie.substring(prefixedName.length));
      }
      if (name == cookie.substring(0, name.length)) {
        return unescape(cookie.substring(name.length));
      }
    }
    return null;
  },
  
  setCookie: function(name, value)
  {
    if (null == value) {
      var expDate = new Date();  
      expDate.setDate(expDate.getDate() - 1);  
      document.cookie = gCookiePrefix + name + '=; expires=' + expDate.toGMTString() + '; ' +
                        'domain=' + gCookieDomain + '; path=' + gCookiePath;
    }
    else {
      document.cookie = gCookiePrefix + name + '=' + escape(value) + '; expires=0; ' +
                        'domain=' + gCookieDomain + '; path=' + gCookiePath;  
    }
  },

  hasClass: function(element, className)
  {
    if (element && ('className' in element)) {
      var classes = element.className.split(' ');
      if (-1 < classes.indexOf(className)) {
        return true;
      }
    }
    return false;
  },

  addClass: function(element, className)
  {
    if (element) {
      var classes = (('className' in element) ? element.className.split(' ') : new Array());
      
      if (-1 == classes.indexOf(className)) {
        classes.push(className);
        element.className = classes.join(' ');
      }
    }
  },

  removeClass: function(element, className)
  {
    if (element) {
      var classes = (('className' in element) ? element.className.split(' ') : new Array());
      var index;
      
      while (-1 < (index = classes.indexOf(className))) {
        classes.splice(index, 1);
      }
      element.className = classes.join(' ');
    }
  },

  findChildWithClass: function(element, className)
  {
    if (element) {
      var children = element.children;
      if (children) {
        for (var index = 0; index < children.length; index++) {
          var child = children[index];
          if ((child.nodeType == Node.ELEMENT_NODE) && this.hasClass(child, className)) {
            return child;
          }
        }
      }
    }
    return null;
  },
  
  getFirstElementChild: function(element)
  {
    if (element) {
      var children = element.children;
      for (var index = 0; index < children.length; index++) {
        var child = children[index];
        if (child.nodeType == Node.ELEMENT_NODE) {
          return child;
        }
      }
    }
    return null;
  },
  
  iterateElementChildren: function(element, callback)
  {
    if (element) {
      var children = Array(); // gather element children in array in case children are mutated during iteration
      for (var index = 0; index < element.children.length; index++) {
        var child = element.children[index];
        if (child.nodeType == Node.ELEMENT_NODE) {
          children.push(child);
        }
      }
      for (var index = 0; index < children.length; index++) {
        var child = children[index];
        var result = callback(child, index);
        if (result) {
          return result;
        }
      }
    }
    return false;
  },
  
  isLoggedIn: function()
  {
    var login = document.getElementById('login');
    return (login && this.hasClass(login, 'loggedin'));
  },
  
  toggleLoginMenu: function()
  {
    var login = document.getElementById('login');
    
    if (login) {
      if (this.hasClass(login, 'open')) {
        this.removeClass(login, 'open');
      }
      else {
        this.addClass(login, 'open');
      }
    }
  },

  updatePageURI: function(uri)
  {
    var login = document.getElementById('login');
    
    if (login) {    // update return paths for login item links
      var a = system.createElement('a', { 'href': uri });
      uri = a.pathname;
      system.iterateElementChildren(login, function(div, index) {
        system.iterateElementChildren(div, function(item, index) {
          if (item.hasAttribute('href')) {
            var href = item.getAttribute('href');
            var index = href.indexOf('/return/');
            if (0 <= index) {
              var prefix = system.commonPrefix(uri, item.pathname);
              item.setAttribute('href', href.substring(0, index) + '/return/' + uri.substring(prefix.length));
            }
          }
        });
      });
    }
  },
  
  createProgressIcon: function()
  {
    var progress = this.createElement('span', { 'class' : 'progress p1' });
    progress.setAttribute('data-timer',
      setInterval(function()
        {
          var state = progress.className.slice(-1);
          state = (state - 0 + 1) % 8;
          progress.className = 'progress p' + state;
        }, 125));
    return progress;
  },
  
  removeProgressIcon: function(progress)
  {
    if (progress) {
      clearInterval(progress.getAttribute('data-timer') - 0);
      if (progress.parentNode) {
        progress.parentNode.removeChild(progress);
      }
    }
  },
  
  addLoadEvent: function(onLoad)
  {
    try {
      var oldOnLoad = window.onload;
      if ('function' != typeof(window.onload)) {
        window.onload = onLoad;
      }
      else {
        window.onload = function () {
          if (oldOnLoad) {
            oldOnLoad();
          }
          onLoad();
        }
      }
    }
    catch (err) {
    }
  },
  
  createElement: function(tagName, attrs, textContent)
  {
    var element = document.createElement(tagName);
    if (attrs) {
      for (attr in attrs) {
        if (attrs.hasOwnProperty(attr)) {
          if ('id' == attr) {
            element.id = attrs.id;
          }
          else if ('className' == attr) {
            element.className = attrs.className;
          }
          else if (attrs[attr]) {
            element.setAttribute(attr, attrs[attr]);
          }
        }
      }
    }
    if (textContent) {
      element.textContent = textContent;
    }
    return element;
  },
  
  emptyElement: function(element)
  {
    if (element) {
      while (element.lastChild) {
        element.removeChild(element.lastChild);
      }
    }
  },
  
  addFormData: function(form, name, value)
  {
    if (form) {
      var hidden = this.createElement('input', { 'type': 'hidden', 'name': name, 'value': value });
      form.appendChild(hidden);
    }
  },
  
  addUserHyperLink: function(parent, user)
  {
    var userName = (user && user.name ? user.name : 'Anonymous User');
    var title = (user && user.full_name && user.name && (user.full_name != user.name) ? user.full_name : '');
    var email = (user && user.email && user.display_email ? user.email : '');
    var uri = (user && user.uri ? user.uri : '');
    
    if (email) {
      parent.appendChild(this.createElement('a', { 'href': 'mailto:' + email, 'title': title }, userName));
    }
    else if (uri) {
      parent.appendChild(this.createElement('a', { 'href': uri, /*'target': 'user',*/ 'title': title }, userName));
    }
    else {
      parent.appendChild(this.createElement('span', { 'title': title }, userName));
    }
  },
  
  _processAPIQueue: function()
  {
    var call = this.mAPIQueue.shift();
    
    if (call) {
      if (! this.mAPIXHR) {
        this.mAPIXHR = new XMLHttpRequest();
      }

      this.mAPIXHR.onreadystatechange = function() {
        if (4 == system.mAPIXHR.readyState) {
          if (call.callback) {
            var response = false;
            try {
              if ('json' == call.type) {
                response = JSON.parse(system.mAPIXHR.responseText);
              }
              else if ('xml' == call.type) {
                response = system.mAPIXHR.responseXML.documentElement
              }
            }
            catch (err) {
            }
            try {
              call.callback(system.mAPIXHR.status, response);
            }
            catch (err) {
              if (call.progress) {
                system.removeProgressIcon(call.progress);
              }
              throw err;
            }
          }
          if (call.progress) {
            system.removeProgressIcon(call.progress);
          }
          this.mAPITimer = setTimeout(function() { system._processAPIQueue() }, 10);
        }
      };
      
      try {
        this.mAPIXHR.open(call.method, call.uri, true);
        if (call.callback) {
          this.mAPIXHR.setRequestHeader('Accept', 'application/json');
        }
        if ('POST' == call.method) {
          this.mAPIXHR.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
          this.mAPIXHR.setRequestHeader('Content-length', call.data.length);
        }
        if ('xml' == call.type) {
          this.mAPIXHR.responseType = 'document';
        }
        else {
          this.mAPIXHR.responseType = '';
        }
        this.mAPIXHR.send(call.data);
      }
      catch (err) {
        if (call.progress) {
          system.removeProgressIcon(call.progress);
        }
        this.mAPITimer = setTimeout(function() { system._processAPIQueue() }, 10);
        throw err;
      }
    }
    else {
      this.mAPITimer = null;
    }
  },
  
  callAPI: function(method, uri, data, type, callback, progressTarget, priority)
  {
    var progress = null;
    if (progressTarget) {
      progress = this.createProgressIcon();
      progressTarget.parentNode.insertBefore(progress, progressTarget.nextSibling);
    }

    var call = { method: method, uri: uri, type: type, data: data, callback: callback, progress: progress };
    if (priority) {
      this.mAPIQueue.unshift(call);
    }
    else {
      this.mAPIQueue.push(call);
    }

    if (null === this.mAPITimer) {
      this.mAPITimer = setTimeout(function() { system._processAPIQueue() }, 10);
    }
  },

  encodeParams: function(params, arrayName)
  {
    var paramString = '';
    for (param in params) {
      if (params.hasOwnProperty(param)) {
        if (paramString) {
          paramString += '&';
        }
        var name = param;
        if (arrayName) {
          name = arrayName + '[' + param + ']';
        }
        if (Array.isArray(params[param])) {
          for (var index = 0; index < params[param].length; index++) {
            paramString += name + '[]=' + params[param][index];
          }
        }
        else if ('object' == typeof(params[param])) {
          paramString += this.encodeParams(params[param], param);
        }
        else if ('boolean' == typeof(params[param])) {
          paramString += name + '=' + (params[param] + 0);
        }
        else {
          paramString += name + '=' + encodeURIComponent(params[param]);
        }
      }
    }
    return paramString;
  },
  
  getXML: function(uri, params, callback, progressTarget, priority)
  {
    if (null == params) {
      params = {};
    }
    var paramString = this.encodeParams(params);
    this.callAPI('GET', uri + '?' + paramString, null, 'xml', callback, progressTarget, priority);
  },

  callAPIGet: function(uri, params, callback, progressTarget, priority)
  {
    if (null == params) {
      params = {};
    }
    var loginKey = this.getCookie('loginkey');
    if (loginKey) {
      params.loginkey = loginKey;
    }
    var paramString = this.encodeParams(params);
    this.callAPI('GET', uri + '?' + paramString, null, 'json', callback, progressTarget, priority);
  },

  callAPIPost: function(uri, params, callback, progressTarget, priority)
  {
    if (null == params) {
      params = {};
    }
    var loginKey = this.getCookie('loginkey');
    if (loginKey) {
      params.loginkey = loginKey;
    }
    var data = this.encodeParams(params);
    this.callAPI('POST', uri, data, 'json', callback, progressTarget, priority);
  },
  
  abortAPICall: function()
  {
    if (this.mAPIXHR) {
      if ((4 != this.mAPIXHR.readyState) && (0 != this.mAPIXHR.readyState)) {
        this.mAPIXHR.abort();
      }
    }
  },
  
  setMenuAlert: function(menuId, state)
  {
    var menuLink = document.getElementById(menuId);
    if (menuLink) {
      if (state) {
        if (! this.hasClass(menuLink, 'alert')) {
          var icon = this.createElement('span', {'class': 'icon alert', 'style': 'top: -14px ! important'});
          menuLink.appendChild(icon);
          this.addClass(menuLink, 'alert');
          setTimeout(function() { icon.setAttribute('style', 'top: ' + (menuLink.offsetTop + 3) + 'px'); }, 100);
        }
      }
      else {
        if (this.hasClass(menuLink, 'alert')) {
          var icon = menuLink.lastChild;
          icon.setAttribute('style', 'top: -14px ! important');
          this.removeClass(menuLink, 'alert');
          setTimeout(function() { menuLink.removeChild(icon); }, 500);
        }
      }
    }
  }

};


// -->
    </script>
    <script type='text/javascript'>
<!--
var gUserRole = null;
var gSystemAPIURI = "\/api\/system\/";
/*******************************************************************************
 *
 *  Copyright © 2013 Hewlett-Packard Development Company, L.P.
 *
 *  This work is distributed under the W3C® Software License [1]
 *  in the hope that it will be useful, but WITHOUT ANY
 *  WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *  [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
 *
 ******************************************************************************/


/**
 * JSON Stream client
 */


Stream = function(uri, params, callback)
{
  this.xhr = new XMLHttpRequest();
  this.callback = callback;
  this.persist = false; // set true to reconnect if dropped
  
  if (! params) {
    params = {};
  }
  var loginKey = system.getCookie('loginkey');
  if (loginKey) {
    params['loginkey'] = loginKey;
  }
  // force uri to be different for each stream so browser will accept multiple connections
  params['stream'] = ++this.gStreamId;
  this.uri = (params ? uri + '?' + system.encodeParams(params) : uri);
  
  var stream = this;
  this.xhr.onreadystatechange = function() {
    if ((200 == stream.xhr.status) &&
        ((3 == stream.xhr.readyState) || (4 == stream.xhr.readyState))) {
      var message = stream.xhr.responseText.substring(stream.processed);

      if (-1 != message.indexOf("\uEE00\uEEFF\uEE00")) {
        var messages = message.split("\uEE00\uEEFF\uEE00");
        for (var index = 0; index < (messages.length - 1); index++) {
          message = messages[index];
          stream.processed += (message.length + 3);
          try {
            response = JSON.parse(message.trim());
          }
          catch (err) {
            console.log("stream parse error: " + message.trim());
            console.log(err);
            continue;
          }
          stream.callback(response.message, response.data);
        }
      }
      if (4 == stream.xhr.readyState) {
        if (stream.persist && (! stream.closed)) {
          setTimeout(function () { if (! stream.closed) { stream.connect(); } }, 10);
        }
        stream.closed = true;
      }
    }
  };

  this.connect();
  return this;
};

Stream.prototype = {
  gStreamId: Math.floor(Math.random() * 0xFFFFFFFF),

  connect: function() {
    this.processed = 0;
    this.closed = false;
    this.xhr.open('GET', this.uri, true);
    this.xhr.setRequestHeader('Accept', 'application/json');
    this.xhr.send();
  },

  close: function()
  {
    this.closed = true;
    if ((4 != this.xhr.readyState) && (0 != this.xhr.readyState)) {
      this.xhr.abort();
    }
  },

  setTimeout: function(callback, timeoutMS)
  {
    this.xhr.timeout = timeoutMS;
    var stream = this;
    this.xhr.ontimeout = function() {
      stream.closed = true;
      callback(stream);
    };
  },
};

// -->
    </script>
    <script type='text/javascript'>
<!--

// -->
    </script>
  </head>
  <body>
    <div class='header'>
      <a class='report' href='/report/?seq=1&amp;uid=806034894'>1-806034894</a>
      <div class='logo'>
        <a href='http://www.w3.org/' rel='home'>
          <img alt='W3C' src='/core/img/logo-w3c-screen-sm.png'>
        </a>
      </div>
      <div class='login' id='login'><div><a href='/login/return/css-backgrounds-3/bg-space/'>Login</a></div></div>
      <p class='nav'><a href='/'>Home</a><a>Not Found</a></p>
      <h1 id='title'>CSS Working Group Editor Drafts</h1>
    </div>
    <div class='body'>
      <img alt src='/img/woolly-lc.png'>
      <h1>404 Not Found</h1>
      <p>The requested URL  cannot be found on this system.</p>
      <p>
        <a href='/?path=css-backgrounds-3%2Fbg-space'>Return to the Home Page.</a>
      </p>
    </div>
    <div class='footer'>
      <address>
        Please send comments, questions, and error reports to 
        <a href='http://lists.w3.org/Archives/Public/www-style'>www-style@w3.org</a>
        <a class='report' href='/report/?seq=2&amp;uid=632441136'>2-632441136</a>
      </address>
    </div>
  </body>
</html>
